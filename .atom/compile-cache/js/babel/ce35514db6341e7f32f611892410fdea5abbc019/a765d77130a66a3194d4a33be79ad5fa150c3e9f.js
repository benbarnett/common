function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _jasmineFix = require('jasmine-fix');

var _libToggleView = require('../lib/toggle-view');

var _libToggleView2 = _interopRequireDefault(_libToggleView);

var _libHelpers = require('../lib/helpers');

describe('Toggle View', function () {
  var oldConfig = undefined;
  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    oldConfig = yield (yield (0, _libHelpers.getConfigFile)()).get();
  }));
  (0, _jasmineFix.afterEach)(_asyncToGenerator(function* () {
    yield new Promise(function (resolve) {
      return _fs2['default'].writeFile(_libHelpers.LINTER_CONFIG_FILE_PATH, JSON.stringify(oldConfig, null, 2), resolve);
    });
  }));

  describe('::getItems', function () {
    (0, _jasmineFix.it)('returns disabled when enabling', _asyncToGenerator(function* () {
      var toggleView = new _libToggleView2['default']('enable', ['Package 1', 'Package 2', 'Package 3']);
      var config = yield toggleView.getConfig();
      yield config.set('disabled', ['Package 2']);
      expect((yield toggleView.getItems())).toEqual(['Package 2']);
    }));
    (0, _jasmineFix.it)('returns enabled when disabling', _asyncToGenerator(function* () {
      var toggleView = new _libToggleView2['default']('disable', ['Package 1', 'Package 2', 'Package 3']);
      var config = yield toggleView.getConfig();
      yield config.set('disabled', ['Package 2']);
      expect((yield toggleView.getItems())).toEqual(['Package 1', 'Package 3']);
    }));
  });
  (0, _jasmineFix.it)('has a working lifecycle', _asyncToGenerator(function* () {
    var didDisable = [];
    var toggleView = new _libToggleView2['default']('disable', ['Package 1', 'Package 2', 'Package 3']);
    var config = yield toggleView.getConfig();

    spyOn(toggleView, 'process').andCallThrough();
    spyOn(toggleView, 'getItems').andCallThrough();
    toggleView.onDidDisable(function (name) {
      return didDisable.push(name);
    });

    expect(didDisable).toEqual([]);
    expect(toggleView.process.calls.length).toBe(0);
    expect(toggleView.getItems.calls.length).toBe(0);
    expect(atom.workspace.getModalPanels().length).toBe(0);
    yield toggleView.show();
    expect(didDisable).toEqual([]);
    expect(toggleView.process.calls.length).toBe(0);
    expect(toggleView.getItems.calls.length).toBe(1);
    expect(atom.workspace.getModalPanels().length).toBe(1);

    var element = atom.workspace.getModalPanels()[0].item.element.querySelector('.list-group');
    expect(element.children.length).toBe(3);
    expect(element.children[0].textContent).toBe('Package 1');
    expect(element.children[1].textContent).toBe('Package 2');
    expect(element.children[2].textContent).toBe('Package 3');
    element.children[1].dispatchEvent(new MouseEvent('click'));

    expect(toggleView.process.calls.length).toBe(1);
    expect(toggleView.getItems.calls.length).toBe(1);
    expect(toggleView.process.calls[0].args[0]).toBe('Package 2');
    yield (0, _jasmineFix.wait)(50);
    expect(didDisable).toEqual(['Package 2']);
    expect((yield config.get('disabled'))).toEqual(['Package 2']);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,