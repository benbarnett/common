function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */
/* eslint-env jasmine, atomtest */

/* This file contains all specs to ensure the base-functionality of
this plugin. */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var projectRoot = _path2['default'].join(__dirname, 'fixtures');
var filePath = _path2['default'].join(projectRoot, 'base.txt');

describe('editorconfig', function () {
	var textEditor = null;

	beforeEach(function () {
		waitsForPromise(function () {
			return Promise.all([atom.packages.activatePackage('editorconfig'), atom.workspace.open(filePath)]).then(function (results) {
				textEditor = results[1];
			});
		});
	});

	it('should provide the EditorConfig:generate-config command', function () {
		var isAvailable = false;
		atom.commands.findCommands({ target: atom.views.getView(atom.workspace) }).forEach(function (command) {
			if (command.name === 'EditorConfig:generate-config') {
				isAvailable = true;
			}
		});
		expect(isAvailable).toBeTruthy();
	});

	it('should provide the EditorConfig:show-state command', function () {
		var isAvailable = false;
		atom.commands.findCommands({ target: atom.views.getView(atom.workspace) }).forEach(function (command) {
			if (command.name === 'EditorConfig:show-state') {
				isAvailable = true;
			}
		});
		expect(isAvailable).toBeTruthy();
	});

	it('should have set the indent_style to "space"', function () {
		expect(textEditor.getSoftTabs()).toBeTruthy();
	});

	it('should have set the indent_size to 2 characters', function () {
		expect(textEditor.getTabLength()).toEqual(2);
	});

	it('should have set the end_of_line-character to "lf"', function () {
		expect(textEditor.getBuffer().getPreferredLineEnding()).toMatch('\n');
	});

	it('should have set the charset of the document to "utf8"', function () {
		expect(textEditor.getEncoding()).toMatch('utf8');
	});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZW5iYXJuZXR0Ly5hdG9tL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9zcGVjL2Jhc2Utc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztvQkFNaUIsTUFBTTs7OztBQUV2QixJQUFNLFdBQVcsR0FBRyxrQkFBSyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELElBQU0sUUFBUSxHQUFHLGtCQUFLLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7O0FBRXBELFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtBQUM5QixLQUFJLFVBQVUsR0FBRyxJQUFJLENBQUM7O0FBRXRCLFdBQVUsQ0FBQyxZQUFNO0FBQ2hCLGlCQUFlLENBQUM7VUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxFQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDN0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU8sRUFBSTtBQUNsQixjQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7R0FBQSxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7O0FBRUgsR0FBRSxDQUFDLHlEQUF5RCxFQUFFLFlBQU07QUFDbkUsTUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLENBQ3RFLE9BQU8sQ0FBQyxVQUFBLE9BQU8sRUFBSTtBQUNuQixPQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssOEJBQThCLEVBQUU7QUFDcEQsZUFBVyxHQUFHLElBQUksQ0FBQztJQUNuQjtHQUNELENBQUMsQ0FBQztBQUNKLFFBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztFQUNqQyxDQUFDLENBQUM7O0FBRUgsR0FBRSxDQUFDLG9EQUFvRCxFQUFFLFlBQU07QUFDOUQsTUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLENBQ3RFLE9BQU8sQ0FBQyxVQUFBLE9BQU8sRUFBSTtBQUNuQixPQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUsseUJBQXlCLEVBQUU7QUFDL0MsZUFBVyxHQUFHLElBQUksQ0FBQztJQUNuQjtHQUNELENBQUMsQ0FBQztBQUNKLFFBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztFQUNqQyxDQUFDLENBQUM7O0FBRUgsR0FBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07QUFDdkQsUUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0VBQzlDLENBQUMsQ0FBQzs7QUFFSCxHQUFFLENBQUMsaURBQWlELEVBQUUsWUFBTTtBQUMzRCxRQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdDLENBQUMsQ0FBQzs7QUFFSCxHQUFFLENBQUMsbURBQW1ELEVBQUUsWUFBTTtBQUM3RCxRQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDdEUsQ0FBQyxDQUFDOztBQUVILEdBQUUsQ0FBQyx1REFBdUQsRUFBRSxZQUFNO0FBQ2pFLFFBQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0NBQ0gsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9iZW5iYXJuZXR0Ly5hdG9tL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9zcGVjL2Jhc2Utc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAYmFiZWwgKi9cbi8qIGVzbGludC1lbnYgamFzbWluZSwgYXRvbXRlc3QgKi9cblxuLyogVGhpcyBmaWxlIGNvbnRhaW5zIGFsbCBzcGVjcyB0byBlbnN1cmUgdGhlIGJhc2UtZnVuY3Rpb25hbGl0eSBvZlxudGhpcyBwbHVnaW4uICovXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBwcm9qZWN0Um9vdCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycpO1xuY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4ocHJvamVjdFJvb3QsICdiYXNlLnR4dCcpO1xuXG5kZXNjcmliZSgnZWRpdG9yY29uZmlnJywgKCkgPT4ge1xuXHRsZXQgdGV4dEVkaXRvciA9IG51bGw7XG5cblx0YmVmb3JlRWFjaCgoKSA9PiB7XG5cdFx0d2FpdHNGb3JQcm9taXNlKCgpID0+IFByb21pc2UuYWxsKFtcblx0XHRcdGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKCdlZGl0b3Jjb25maWcnKSxcblx0XHRcdGF0b20ud29ya3NwYWNlLm9wZW4oZmlsZVBhdGgpXG5cdFx0XSkudGhlbihyZXN1bHRzID0+IHtcblx0XHRcdHRleHRFZGl0b3IgPSByZXN1bHRzWzFdO1xuXHRcdH0pKTtcblx0fSk7XG5cblx0aXQoJ3Nob3VsZCBwcm92aWRlIHRoZSBFZGl0b3JDb25maWc6Z2VuZXJhdGUtY29uZmlnIGNvbW1hbmQnLCAoKSA9PiB7XG5cdFx0bGV0IGlzQXZhaWxhYmxlID0gZmFsc2U7XG5cdFx0YXRvbS5jb21tYW5kcy5maW5kQ29tbWFuZHMoe3RhcmdldDogYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKX0pXG5cdFx0XHQuZm9yRWFjaChjb21tYW5kID0+IHtcblx0XHRcdFx0aWYgKGNvbW1hbmQubmFtZSA9PT0gJ0VkaXRvckNvbmZpZzpnZW5lcmF0ZS1jb25maWcnKSB7XG5cdFx0XHRcdFx0aXNBdmFpbGFibGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRleHBlY3QoaXNBdmFpbGFibGUpLnRvQmVUcnV0aHkoKTtcblx0fSk7XG5cblx0aXQoJ3Nob3VsZCBwcm92aWRlIHRoZSBFZGl0b3JDb25maWc6c2hvdy1zdGF0ZSBjb21tYW5kJywgKCkgPT4ge1xuXHRcdGxldCBpc0F2YWlsYWJsZSA9IGZhbHNlO1xuXHRcdGF0b20uY29tbWFuZHMuZmluZENvbW1hbmRzKHt0YXJnZXQ6IGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSl9KVxuXHRcdFx0LmZvckVhY2goY29tbWFuZCA9PiB7XG5cdFx0XHRcdGlmIChjb21tYW5kLm5hbWUgPT09ICdFZGl0b3JDb25maWc6c2hvdy1zdGF0ZScpIHtcblx0XHRcdFx0XHRpc0F2YWlsYWJsZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdGV4cGVjdChpc0F2YWlsYWJsZSkudG9CZVRydXRoeSgpO1xuXHR9KTtcblxuXHRpdCgnc2hvdWxkIGhhdmUgc2V0IHRoZSBpbmRlbnRfc3R5bGUgdG8gXCJzcGFjZVwiJywgKCkgPT4ge1xuXHRcdGV4cGVjdCh0ZXh0RWRpdG9yLmdldFNvZnRUYWJzKCkpLnRvQmVUcnV0aHkoKTtcblx0fSk7XG5cblx0aXQoJ3Nob3VsZCBoYXZlIHNldCB0aGUgaW5kZW50X3NpemUgdG8gMiBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuXHRcdGV4cGVjdCh0ZXh0RWRpdG9yLmdldFRhYkxlbmd0aCgpKS50b0VxdWFsKDIpO1xuXHR9KTtcblxuXHRpdCgnc2hvdWxkIGhhdmUgc2V0IHRoZSBlbmRfb2ZfbGluZS1jaGFyYWN0ZXIgdG8gXCJsZlwiJywgKCkgPT4ge1xuXHRcdGV4cGVjdCh0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpLmdldFByZWZlcnJlZExpbmVFbmRpbmcoKSkudG9NYXRjaCgnXFxuJyk7XG5cdH0pO1xuXG5cdGl0KCdzaG91bGQgaGF2ZSBzZXQgdGhlIGNoYXJzZXQgb2YgdGhlIGRvY3VtZW50IHRvIFwidXRmOFwiJywgKCkgPT4ge1xuXHRcdGV4cGVjdCh0ZXh0RWRpdG9yLmdldEVuY29kaW5nKCkpLnRvTWF0Y2goJ3V0ZjgnKTtcblx0fSk7XG59KTtcbiJdfQ==