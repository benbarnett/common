function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */
/* eslint-env jasmine, atomtest */

/*
  This file contains verifying specs for:
  https://github.com/sindresorhus/atom-editorconfig/issues/168
  and the general implementation of FixFile

  #169 is missing the preservation of trailing whitespaces in doc-comments, which
  until yet got normalized by FixFile.
*/

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commandsFix = require('../commands/fix');

var testPrefix = _path2['default'].basename(__filename).split('-').shift();
var projectRoot = _path2['default'].join(__dirname, 'fixtures', testPrefix);
var filePath = _path2['default'].join(projectRoot, 'test.' + testPrefix);

var spacedText = '\nthis is some test\n  for the fixFile\n  function\n\n/*\n read this sane comment\n*/\nI really\n  /*\n   or this one!\n  */\n  hope\n  it\n    works better\n  now\n';

var tabbedText = '\nthis is some test\n\tfor the fixFile\n\tfunction\n\n/*\n read this sane comment\n*/\nI really\n\t/*\n\t or this one!\n\t*/\n\thope\n\tit\n\t\tworks better\n\tnow\n';

describe('editorconfig', function () {
	var editor = undefined;

	beforeEach(function () {
		waitsForPromise(function () {
			return Promise.all([atom.packages.activatePackage('editorconfig'), atom.workspace.open(filePath)]).then(function (results) {
				editor = results.pop();
			});
		});
	});

	afterEach(function () {
		// remove the created fixture, if it exists
		runs(function () {
			_fs2['default'].stat(filePath, function (err, stats) {
				if (!err && stats.isFile()) {
					_fs2['default'].unlink(filePath);
				}
			});
		});

		waitsFor(function () {
			try {
				return _fs2['default'].statSync(filePath).isFile() === false;
			} catch (err) {
				return true;
			}
		}, 5000, 'removed ' + filePath);
	});

	describe('EditorConfig:FixFile', function () {
		it('should transform trailing soft-/tabs and preserve additional spaces', function () {
			var buffer = editor.getBuffer();
			var ecfg = buffer.editorconfig;

			ecfg.settings.indent_style = 'tab'; // eslint-disable-line camelcase
			ecfg.settings.indent_size = 2; // eslint-disable-line camelcase
			ecfg.settings.tab_width = 2; // eslint-disable-line camelcase
			ecfg.applySettings();

			buffer.setText(spacedText);
			expect(buffer.getText()).toEqual(spacedText);
			(0, _commandsFix.init)();
			expect(buffer.getText()).toEqual(tabbedText);

			ecfg.settings.indent_style = 'space'; // eslint-disable-line camelcase
			(0, _commandsFix.init)();
			expect(buffer.getText()).toEqual(spacedText);
		});
	});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZW5iYXJuZXR0Ly5hdG9tL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9zcGVjL2ZpeC1maWxlLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7a0JBWWUsSUFBSTs7OztvQkFDRixNQUFNOzs7OzJCQUVPLGlCQUFpQjs7QUFFL0MsSUFBTSxVQUFVLEdBQUcsa0JBQUssUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoRSxJQUFNLFdBQVcsR0FBRyxrQkFBSyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRSxJQUFNLFFBQVEsR0FBRyxrQkFBSyxJQUFJLENBQUMsV0FBVyxZQUFVLFVBQVUsQ0FBRyxDQUFDOztBQUU5RCxJQUFNLFVBQVUsMEtBZ0JmLENBQUM7O0FBRUYsSUFBTSxVQUFVLDBLQWdCZixDQUFDOztBQUVGLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtBQUM5QixLQUFJLE1BQU0sWUFBQSxDQUFDOztBQUVYLFdBQVUsQ0FBQyxZQUFNO0FBQ2hCLGlCQUFlLENBQUM7VUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLENBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLEVBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQ2xCLFVBQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQztHQUFBLENBQ0YsQ0FBQztFQUNGLENBQUMsQ0FBQzs7QUFFSCxVQUFTLENBQUMsWUFBTTs7QUFFZixNQUFJLENBQUMsWUFBTTtBQUNWLG1CQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFLO0FBQ2pDLFFBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO0FBQzNCLHFCQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNwQjtJQUNELENBQUMsQ0FBQztHQUNILENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsWUFBTTtBQUNkLE9BQUk7QUFDSCxXQUFPLGdCQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxLQUFLLENBQUM7SUFDaEQsQ0FBQyxPQUFPLEdBQUcsRUFBRTtBQUNiLFdBQU8sSUFBSSxDQUFDO0lBQ1o7R0FDRCxFQUFFLElBQUksZUFBYSxRQUFRLENBQUcsQ0FBQztFQUNoQyxDQUFDLENBQUM7O0FBRUgsU0FBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07QUFDdEMsSUFBRSxDQUFDLHFFQUFxRSxFQUFFLFlBQU07QUFDL0UsT0FBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2xDLE9BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7O0FBRWpDLE9BQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztBQUNuQyxPQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDOUIsT0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLE9BQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzs7QUFFckIsU0FBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzQixTQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdDLDJCQUFTLENBQUM7QUFDVixTQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUU3QyxPQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7QUFDckMsMkJBQVMsQ0FBQztBQUNWLFNBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDN0MsQ0FBQyxDQUFDO0VBQ0gsQ0FBQyxDQUFDO0NBQ0gsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9iZW5iYXJuZXR0Ly5hdG9tL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9zcGVjL2ZpeC1maWxlLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG4vKiBlc2xpbnQtZW52IGphc21pbmUsIGF0b210ZXN0ICovXG5cbi8qXG4gIFRoaXMgZmlsZSBjb250YWlucyB2ZXJpZnlpbmcgc3BlY3MgZm9yOlxuICBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2F0b20tZWRpdG9yY29uZmlnL2lzc3Vlcy8xNjhcbiAgYW5kIHRoZSBnZW5lcmFsIGltcGxlbWVudGF0aW9uIG9mIEZpeEZpbGVcblxuICAjMTY5IGlzIG1pc3NpbmcgdGhlIHByZXNlcnZhdGlvbiBvZiB0cmFpbGluZyB3aGl0ZXNwYWNlcyBpbiBkb2MtY29tbWVudHMsIHdoaWNoXG4gIHVudGlsIHlldCBnb3Qgbm9ybWFsaXplZCBieSBGaXhGaWxlLlxuKi9cblxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQge2luaXQgYXMgZml4RmlsZX0gZnJvbSAnLi4vY29tbWFuZHMvZml4JztcblxuY29uc3QgdGVzdFByZWZpeCA9IHBhdGguYmFzZW5hbWUoX19maWxlbmFtZSkuc3BsaXQoJy0nKS5zaGlmdCgpO1xuY29uc3QgcHJvamVjdFJvb3QgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnLCB0ZXN0UHJlZml4KTtcbmNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHByb2plY3RSb290LCBgdGVzdC4ke3Rlc3RQcmVmaXh9YCk7XG5cbmNvbnN0IHNwYWNlZFRleHQgPSBgXG50aGlzIGlzIHNvbWUgdGVzdFxuICBmb3IgdGhlIGZpeEZpbGVcbiAgZnVuY3Rpb25cblxuLypcbiByZWFkIHRoaXMgc2FuZSBjb21tZW50XG4qL1xuSSByZWFsbHlcbiAgLypcbiAgIG9yIHRoaXMgb25lIVxuICAqL1xuICBob3BlXG4gIGl0XG4gICAgd29ya3MgYmV0dGVyXG4gIG5vd1xuYDtcblxuY29uc3QgdGFiYmVkVGV4dCA9IGBcbnRoaXMgaXMgc29tZSB0ZXN0XG5cXHRmb3IgdGhlIGZpeEZpbGVcblxcdGZ1bmN0aW9uXG5cbi8qXG4gcmVhZCB0aGlzIHNhbmUgY29tbWVudFxuKi9cbkkgcmVhbGx5XG5cXHQvKlxuXFx0IG9yIHRoaXMgb25lIVxuXFx0Ki9cblxcdGhvcGVcblxcdGl0XG5cXHRcXHR3b3JrcyBiZXR0ZXJcblxcdG5vd1xuYDtcblxuZGVzY3JpYmUoJ2VkaXRvcmNvbmZpZycsICgpID0+IHtcblx0bGV0IGVkaXRvcjtcblxuXHRiZWZvcmVFYWNoKCgpID0+IHtcblx0XHR3YWl0c0ZvclByb21pc2UoKCkgPT5cblx0XHRcdFByb21pc2UuYWxsKFtcblx0XHRcdFx0YXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2VkaXRvcmNvbmZpZycpLFxuXHRcdFx0XHRhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVQYXRoKVxuXHRcdFx0XSkudGhlbihyZXN1bHRzID0+IHtcblx0XHRcdFx0ZWRpdG9yID0gcmVzdWx0cy5wb3AoKTtcblx0XHRcdH0pXG5cdFx0KTtcblx0fSk7XG5cblx0YWZ0ZXJFYWNoKCgpID0+IHtcblx0XHQvLyByZW1vdmUgdGhlIGNyZWF0ZWQgZml4dHVyZSwgaWYgaXQgZXhpc3RzXG5cdFx0cnVucygoKSA9PiB7XG5cdFx0XHRmcy5zdGF0KGZpbGVQYXRoLCAoZXJyLCBzdGF0cykgPT4ge1xuXHRcdFx0XHRpZiAoIWVyciAmJiBzdGF0cy5pc0ZpbGUoKSkge1xuXHRcdFx0XHRcdGZzLnVubGluayhmaWxlUGF0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0d2FpdHNGb3IoKCkgPT4ge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuIGZzLnN0YXRTeW5jKGZpbGVQYXRoKS5pc0ZpbGUoKSA9PT0gZmFsc2U7XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fSwgNTAwMCwgYHJlbW92ZWQgJHtmaWxlUGF0aH1gKTtcblx0fSk7XG5cblx0ZGVzY3JpYmUoJ0VkaXRvckNvbmZpZzpGaXhGaWxlJywgKCkgPT4ge1xuXHRcdGl0KCdzaG91bGQgdHJhbnNmb3JtIHRyYWlsaW5nIHNvZnQtL3RhYnMgYW5kIHByZXNlcnZlIGFkZGl0aW9uYWwgc3BhY2VzJywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgYnVmZmVyID0gZWRpdG9yLmdldEJ1ZmZlcigpO1xuXHRcdFx0Y29uc3QgZWNmZyA9IGJ1ZmZlci5lZGl0b3Jjb25maWc7XG5cblx0XHRcdGVjZmcuc2V0dGluZ3MuaW5kZW50X3N0eWxlID0gJ3RhYic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cdFx0XHRlY2ZnLnNldHRpbmdzLmluZGVudF9zaXplID0gMjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2Vcblx0XHRcdGVjZmcuc2V0dGluZ3MudGFiX3dpZHRoID0gMjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2Vcblx0XHRcdGVjZmcuYXBwbHlTZXR0aW5ncygpO1xuXG5cdFx0XHRidWZmZXIuc2V0VGV4dChzcGFjZWRUZXh0KTtcblx0XHRcdGV4cGVjdChidWZmZXIuZ2V0VGV4dCgpKS50b0VxdWFsKHNwYWNlZFRleHQpO1xuXHRcdFx0Zml4RmlsZSgpO1xuXHRcdFx0ZXhwZWN0KGJ1ZmZlci5nZXRUZXh0KCkpLnRvRXF1YWwodGFiYmVkVGV4dCk7XG5cblx0XHRcdGVjZmcuc2V0dGluZ3MuaW5kZW50X3N0eWxlID0gJ3NwYWNlJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2Vcblx0XHRcdGZpeEZpbGUoKTtcblx0XHRcdGV4cGVjdChidWZmZXIuZ2V0VGV4dCgpKS50b0VxdWFsKHNwYWNlZFRleHQpO1xuXHRcdH0pO1xuXHR9KTtcbn0pO1xuIl19