Object.defineProperty(exports, '__esModule', {
	value: true
});
/** @babel */

var notificationTemplate = function notificationTemplate(props) {
	return '\n' + props.messages.reduce(function (prev, curr) {
		return '' + prev + curr.replace(/\r|\n/gm, '').replace('@', '  \n') + '\n\n';
	}, '') + '\n\n### Active Configuration\n|Editorconfig-Property|Applied Setting|\n|--------|------:|\n|`end_of_line`|`' + props.end_of_line + '`|\n|`charset`|`' + props.charset + '`|\n|`indent_style`|`' + props.indent_style + '`|\n|`indent_size`/ `tab_width`|`' + props.tab_width + '`|\n|`insert_final_newline`|`' + props.insert_final_newline + '`|\n|`trim_trailing_whitespace`|`' + props.trim_trailing_whitespace + '`|\n|`max_line_length`|`' + props.max_line_length + '`|\n\n_(auto: atom-editorconfig is not influencing its behavior. A full description of all properties can be found on editorconfig.org.)_\n\n' + (props.filename !== undefined && props.filename || '') + '\n';
};

var init = function init() {
	var textEditor = atom.workspace.getActiveTextEditor();
	if (textEditor && textEditor.getBuffer() && textEditor.getBuffer().editorconfig) {
		var buffer = textEditor.getBuffer();
		var ecfg = buffer.editorconfig;
		var settings = ecfg.settings;
		var lineEndings = { '\n': '\\n', '\r': '\\r', '\r\n': '\\r\\n' };

		var properties = {
			filename: buffer.getUri(),
			messages: ecfg.messages,
			// eslint-disable-next-line camelcase
			end_of_line: lineEndings[settings.end_of_line] || settings.end_of_line,
			charset: settings.charset,
			// eslint-disable-next-line camelcase
			indent_style: settings.indent_style,
			// eslint-disable-next-line camelcase
			tab_width: settings.tab_width,
			// eslint-disable-next-line camelcase
			insert_final_newline: settings.insert_final_newline,
			// eslint-disable-next-line camelcase
			trim_trailing_whitespace: settings.trim_trailing_whitespace,
			// eslint-disable-next-line camelcase
			max_line_length: settings.max_line_length
		};

		var notificationOptions = {
			description: notificationTemplate(properties),
			dismissable: true
		};

		switch (ecfg.state) {
			case 'success':
				atom.notifications.addSuccess(textEditor.getTitle(), notificationOptions);
				break;
			case 'warning':
				atom.notifications.addWarning(textEditor.getTitle(), notificationOptions);
				break;
			case 'error':
				atom.notifications.addError(textEditor.getTitle(), notificationOptions);
				break;
			default:
				atom.notifications.addInfo(textEditor.getTitle(), notificationOptions);
		}
	}
};

var subscriber = function subscriber() {
	atom.commands.add('atom-workspace', 'EditorConfig:show-state', init);
};

exports['default'] = subscriber;
exports.init = init;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9iZW5iYXJuZXR0Ly5hdG9tL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9jb21tYW5kcy9zaG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBTSxvQkFBb0IsR0FBRyxTQUF2QixvQkFBb0IsQ0FBRyxLQUFLLEVBQUk7QUFDckMsZUFDQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxJQUFJLEVBQUs7QUFDdkMsY0FBVSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsVUFBTztFQUN4RSxFQUFFLEVBQUUsQ0FBQyxtSEFLZSxLQUFLLENBQUMsV0FBVyx3QkFDckIsS0FBSyxDQUFDLE9BQU8sNkJBQ1IsS0FBSyxDQUFDLFlBQVkseUNBQ0osS0FBSyxDQUFDLFNBQVMscUNBQ3JCLEtBQUssQ0FBQyxvQkFBb0IseUNBQ3RCLEtBQUssQ0FBQyx3QkFBd0IsZ0NBQ3ZDLEtBQUssQ0FBQyxlQUFlLHNKQUk1QyxBQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUssRUFBRSxDQUFBLFFBQ3REO0NBQ0QsQ0FBQzs7QUFFRixJQUFNLElBQUksR0FBRyxTQUFQLElBQUksR0FBUztBQUNsQixLQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDeEQsS0FBSSxVQUFVLElBQ2IsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUN0QixVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxFQUFFO0FBQ3JDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ2pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDL0IsTUFBTSxXQUFXLEdBQUcsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQyxDQUFDOztBQUVqRSxNQUFNLFVBQVUsR0FBRztBQUNsQixXQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUN6QixXQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7O0FBRXZCLGNBQVcsRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxXQUFXO0FBQ3RFLFVBQU8sRUFBRSxRQUFRLENBQUMsT0FBTzs7QUFFekIsZUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZOztBQUVuQyxZQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVM7O0FBRTdCLHVCQUFvQixFQUFFLFFBQVEsQ0FBQyxvQkFBb0I7O0FBRW5ELDJCQUF3QixFQUFFLFFBQVEsQ0FBQyx3QkFBd0I7O0FBRTNELGtCQUFlLEVBQUUsUUFBUSxDQUFDLGVBQWU7R0FDekMsQ0FBQzs7QUFFRixNQUFNLG1CQUFtQixHQUFHO0FBQzNCLGNBQVcsRUFBRSxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7QUFDN0MsY0FBVyxFQUFFLElBQUk7R0FDakIsQ0FBQzs7QUFFRixVQUFRLElBQUksQ0FBQyxLQUFLO0FBQ2pCLFFBQUssU0FBUztBQUNiLFFBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzFFLFVBQU07QUFBQSxBQUNQLFFBQUssU0FBUztBQUNiLFFBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzFFLFVBQU07QUFBQSxBQUNQLFFBQUssT0FBTztBQUNYLFFBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3hFLFVBQU07QUFBQSxBQUNQO0FBQ0MsUUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFBQSxHQUN4RTtFQUNEO0NBQ0QsQ0FBQzs7QUFFRixJQUFNLFVBQVUsR0FBRyxTQUFiLFVBQVUsR0FBUztBQUN4QixLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSx5QkFBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNyRSxDQUFDOztxQkFFTSxVQUFVO1FBQWEsSUFBSSxHQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2JlbmJhcm5ldHQvLmF0b20vcGFja2FnZXMvZWRpdG9yY29uZmlnL2NvbW1hbmRzL3Nob3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmNvbnN0IG5vdGlmaWNhdGlvblRlbXBsYXRlID0gcHJvcHMgPT4ge1xuXHRyZXR1cm4gYFxuJHtwcm9wcy5tZXNzYWdlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHtcblx0cmV0dXJuIGAke3ByZXZ9JHtjdXJyLnJlcGxhY2UoL1xccnxcXG4vZ20sICcnKS5yZXBsYWNlKCdAJywgJyAgXFxuJyl9XFxuXFxuYDtcbn0sICcnKX1cblxuIyMjIEFjdGl2ZSBDb25maWd1cmF0aW9uXG58RWRpdG9yY29uZmlnLVByb3BlcnR5fEFwcGxpZWQgU2V0dGluZ3xcbnwtLS0tLS0tLXwtLS0tLS06fFxufFxcYGVuZF9vZl9saW5lXFxgfFxcYCR7cHJvcHMuZW5kX29mX2xpbmV9XFxgfFxufFxcYGNoYXJzZXRcXGB8XFxgJHtwcm9wcy5jaGFyc2V0fVxcYHxcbnxcXGBpbmRlbnRfc3R5bGVcXGB8XFxgJHtwcm9wcy5pbmRlbnRfc3R5bGV9XFxgfFxufFxcYGluZGVudF9zaXplXFxgLyBcXGB0YWJfd2lkdGhcXGB8XFxgJHtwcm9wcy50YWJfd2lkdGh9XFxgfFxufFxcYGluc2VydF9maW5hbF9uZXdsaW5lXFxgfFxcYCR7cHJvcHMuaW5zZXJ0X2ZpbmFsX25ld2xpbmV9XFxgfFxufFxcYHRyaW1fdHJhaWxpbmdfd2hpdGVzcGFjZVxcYHxcXGAke3Byb3BzLnRyaW1fdHJhaWxpbmdfd2hpdGVzcGFjZX1cXGB8XG58XFxgbWF4X2xpbmVfbGVuZ3RoXFxgfFxcYCR7cHJvcHMubWF4X2xpbmVfbGVuZ3RofVxcYHxcblxuXyhhdXRvOiBhdG9tLWVkaXRvcmNvbmZpZyBpcyBub3QgaW5mbHVlbmNpbmcgaXRzIGJlaGF2aW9yLiBBIGZ1bGwgZGVzY3JpcHRpb24gb2YgYWxsIHByb3BlcnRpZXMgY2FuIGJlIGZvdW5kIG9uIGVkaXRvcmNvbmZpZy5vcmcuKV9cblxuJHsocHJvcHMuZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5maWxlbmFtZSkgfHwgJyd9XG5gO1xufTtcblxuY29uc3QgaW5pdCA9ICgpID0+IHtcblx0Y29uc3QgdGV4dEVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcblx0aWYgKHRleHRFZGl0b3IgJiZcblx0XHR0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpICYmXG5cdFx0dGV4dEVkaXRvci5nZXRCdWZmZXIoKS5lZGl0b3Jjb25maWcpIHtcblx0XHRjb25zdCBidWZmZXIgPSB0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpO1xuXHRcdGNvbnN0IGVjZmcgPSBidWZmZXIuZWRpdG9yY29uZmlnO1xuXHRcdGNvbnN0IHNldHRpbmdzID0gZWNmZy5zZXR0aW5ncztcblx0XHRjb25zdCBsaW5lRW5kaW5ncyA9IHsnXFxuJzogJ1xcXFxuJywgJ1xccic6ICdcXFxccicsICdcXHJcXG4nOiAnXFxcXHJcXFxcbid9O1xuXG5cdFx0Y29uc3QgcHJvcGVydGllcyA9IHtcblx0XHRcdGZpbGVuYW1lOiBidWZmZXIuZ2V0VXJpKCksXG5cdFx0XHRtZXNzYWdlczogZWNmZy5tZXNzYWdlcyxcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2Vcblx0XHRcdGVuZF9vZl9saW5lOiBsaW5lRW5kaW5nc1tzZXR0aW5ncy5lbmRfb2ZfbGluZV0gfHwgc2V0dGluZ3MuZW5kX29mX2xpbmUsXG5cdFx0XHRjaGFyc2V0OiBzZXR0aW5ncy5jaGFyc2V0LFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0aW5kZW50X3N0eWxlOiBzZXR0aW5ncy5pbmRlbnRfc3R5bGUsXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdFx0XHR0YWJfd2lkdGg6IHNldHRpbmdzLnRhYl93aWR0aCxcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2Vcblx0XHRcdGluc2VydF9maW5hbF9uZXdsaW5lOiBzZXR0aW5ncy5pbnNlcnRfZmluYWxfbmV3bGluZSxcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2Vcblx0XHRcdHRyaW1fdHJhaWxpbmdfd2hpdGVzcGFjZTogc2V0dGluZ3MudHJpbV90cmFpbGluZ193aGl0ZXNwYWNlLFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0bWF4X2xpbmVfbGVuZ3RoOiBzZXR0aW5ncy5tYXhfbGluZV9sZW5ndGhcblx0XHR9O1xuXG5cdFx0Y29uc3Qgbm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBub3RpZmljYXRpb25UZW1wbGF0ZShwcm9wZXJ0aWVzKSxcblx0XHRcdGRpc21pc3NhYmxlOiB0cnVlXG5cdFx0fTtcblxuXHRcdHN3aXRjaCAoZWNmZy5zdGF0ZSkge1xuXHRcdFx0Y2FzZSAnc3VjY2Vzcyc6XG5cdFx0XHRcdGF0b20ubm90aWZpY2F0aW9ucy5hZGRTdWNjZXNzKHRleHRFZGl0b3IuZ2V0VGl0bGUoKSwgbm90aWZpY2F0aW9uT3B0aW9ucyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnd2FybmluZyc6XG5cdFx0XHRcdGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKHRleHRFZGl0b3IuZ2V0VGl0bGUoKSwgbm90aWZpY2F0aW9uT3B0aW9ucyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZXJyb3InOlxuXHRcdFx0XHRhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IodGV4dEVkaXRvci5nZXRUaXRsZSgpLCBub3RpZmljYXRpb25PcHRpb25zKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbyh0ZXh0RWRpdG9yLmdldFRpdGxlKCksIG5vdGlmaWNhdGlvbk9wdGlvbnMpO1xuXHRcdH1cblx0fVxufTtcblxuY29uc3Qgc3Vic2NyaWJlciA9ICgpID0+IHtcblx0YXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywgJ0VkaXRvckNvbmZpZzpzaG93LXN0YXRlJywgaW5pdCk7XG59O1xuXG5leHBvcnQge3N1YnNjcmliZXIgYXMgZGVmYXVsdCwgaW5pdH07XG4iXX0=